#!/usr/bin/env bash
#
# ydf
#
# Manage ydotfiles
#

set -eu

# FOR CODE COMPLETION
if false; then
  # lib
  source ../lib/ydf/components/package/ydf-package-command.bash
fi

# CONSTANTS
readonly __YDF_SCRIPT_NAME="${BASH_SOURCE[0]##*/}"
# shellcheck disable=SC2155
readonly __YDF_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
readonly __YDF_LIB_DIR="${__YDF_DIR}/usr/lib/ydf"
readonly __YDF_COMPONENTS_DIR="${__YDF_LIB_DIR}/components"
readonly __YDF_CONFIG_DIR="${__YDF_DIR}/etc/ydf"
readonly __YDF_CONFIG="${__YDF_CONFIG_DIR}/ydf.env"

# LOAD CONFIG
# shellcheck source=../../etc/ydf/ydf.env
if [[ -f "$__YDF_CONFIG" ]]; then source "$__YDF_CONFIG"; fi
# shellcheck source=/dev/null
if [[ "${YDF_LOAD_HOME_CONFIG:-true}" == true && -f ~/.ydf.env ]]; then source ~/.ydf.env; fi
# shellcheck source=/dev/null
if [[ "$PWD" != "$HOME" && -f .ydf.env ]]; then source .ydf.env; fi

# ENVIRONMENT
# scheme:        VAR="${ENVIRONMENT_VAR:-"${CONFIG_VAR:-default}"}"
# e.g.: readonly YDF_VAR="${YDF_VAR:-"${VAR:-default}"}"
readonly _YDF_TMP_DIR="${E_YDF_TMP_DIR:-"${YDF_TMP_DIR:-"/var/tmp/${USER}/ydf"}"}"
readonly _YDF_CACHE_DIR="${E_YDF_CACHE_DIR:-"${YDF_CACHE_DIR:-"${HOME}/.var/cache/ydf"}"}"
readonly _YDF_PACKAGE_SERVICE_DEFAULT_OS="${E_YDF_PACKAGE_SERVICE_DEFAULT_OS:-"${YDF_PACKAGE_SERVICE_DEFAULT_OS:-any}"}"
readonly _YDF_YZSH_DATA_DIR="${E_YDF_YZSH_DATA_DIR:-"${YDF_YZSH_DATA_DIR:-"${HOME}/.yzsh"}"}"
readonly _YDF_YZSH_GEN_CONFIG_FILE="${E_YDF_YZSH_GEN_CONFIG_FILE:-"${YDF_YZSH_GEN_CONFIG_FILE:-"${HOME}/.yzsh-gen.env"}"}"
readonly _YDF_PACKAGE_SERVICE_ENVSUBST_FILE="${E_YDF_PACKAGE_SERVICE_ENVSUBST_FILE:-"${YDF_PACKAGE_SERVICE_ENVSUBST_FILE:-"${HOME}/.ydf-envsub.env"}"}"
readonly _YDF_UTILS_NO_MSG="${E_YDF_UTILS_NO_MSG:-"${YDF_UTILS_NO_MSG:-false}"}"

# CREATE DIRECTORIES
ydf::__create_dirs() {

  local -a ydf_dirs_arr=(
    "$_YDF_TMP_DIR"
    "$_YDF_CACHE_DIR"
  )

  for dir in "${ydf_dirs_arr[@]}"; do
    if [[ ! -d "$dir" ]]; then
      mkdir -p "$dir" || return $?
    fi
  done
}

# CREATE FILES
ydf::__create_files() {
  # ~/.ydf-envsub.env
  if [[ ! -f "$_YDF_PACKAGE_SERVICE_ENVSUBST_FILE" ]]; then
    cat <<EOF >"$_YDF_PACKAGE_SERVICE_ENVSUBST_FILE"
# shellcheck disable=SC2034,SC2148

EOF
  fi
}

# SOURCE FILES
ydf::__source_files() {
  # shellcheck source=../lib/ydf/errors.bash
  source "${__YDF_LIB_DIR}/errors.bash"
  # shellcheck source=../lib/ydf/utils.bash
  source "${__YDF_LIB_DIR}/utils.bash"
  # shellcheck source=/dev/null
  for f in "${__YDF_COMPONENTS_DIR}/"*/*.bash; do source "$f"; done
}

ydf::__init_components() {
  ydf::utils::constructor "$_YDF_UTILS_NO_MSG"

  ydf::package_service::constructor \
    "$_YDF_PACKAGE_SERVICE_DEFAULT_OS" \
    "$_YDF_YZSH_DATA_DIR" \
    "$_YDF_YZSH_GEN_CONFIG_FILE" \
    "$_YDF_PACKAGE_SERVICE_ENVSUBST_FILE"

}

# FUNCTIONS

ydf::__help() {
  cat <<-HELPMSG
Usage:
${__YDF_SCRIPT_NAME} COMMAND

A tool for managing ydotfiles

Flags:
  -h, --help    Show this help

Management Commands:
  package   Manage packages

Run '${__YDF_SCRIPT_NAME} COMMAND --help' for more information on a command.
HELPMSG
}

# EVENTS

ydf::__on_start() {
  :
}

ydf::__on_exit() {
  :
}

#

ydf::run_cmd() {
  if [[ $# == 0 ]]; then set -- '-h'; fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      ydf::__help
      return 0
      ;;
    package)
      shift
      ydf::package_service::run_cmd "$@"
      return $?
      ;;
    *)
      err "Invalid command: ${1}\n"
      ydf::__help
      return "$ERR_INVAL_ARG"
      ;;
    esac
  done
}

ydf::main() {
  ydf::__create_dirs
  ydf::__create_files
  ydf::__source_files
  ydf::__init_components

  ydf::run_cmd "$@"
}

if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
  ydf::main "$@"
fi
